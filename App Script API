function procesarDatosYCrearGraficos() {
  var hoja = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var datos = hoja.getDataRange().getValues();

  if (datos.length <= 1) {
    Logger.log("No hay datos suficientes en la hoja.");
    return;
  }

  // Encabezados de las columnas a mantener
  var columnasDeseadas = [
    "Time Stamp", "app_gpu_time_microseconds", "timewarp_gpu_time_microseconds",
    "gpu_utilization_percentage", "cpu_utilization_percentage", "average_frame_rate",
    "stale_frame_count", "available_memory_MB", "screen_tear_count", "max_repeated_frames",
    "early_frame_count", "stale_frames_consecutive", "normalized_gpu_time" // Mantenemos normalized_gpu_time
  ];

  var encabezados = columnasDeseadas.slice();
  var indices = columnasDeseadas.map(col => datos[0].indexOf(col)).filter(i => i !== -1);
  var nuevosDatos = datos.slice(1).map(fila => indices.map(i => fila[i]));

  // Calcular Normalized GPU Time (asegurándonos que el índice exista)
  var indiceGpuTime = columnasDeseadas.indexOf("app_gpu_time_microseconds");
  if (indiceGpuTime !== -1) {
    var maxGpuTime = Math.max(...nuevosDatos.map(row => row[indiceGpuTime]));
    if (!encabezados.includes("normalized_gpu_time")) { // Evitar duplicados si ya existe
      encabezados.push("normalized_gpu_time");
    }
    for (var i = 0; i < nuevosDatos.length; i++) {
      nuevosDatos[i].push(Math.round((nuevosDatos[i][indiceGpuTime] / maxGpuTime) * 100));
    }
  }

  // Limpiar hoja y escribir datos y encabezados
  hoja.clear();
  hoja.getRange(1, 1, 1, encabezados.length).setValues([encabezados]);
  hoja.getRange(2, 1, nuevosDatos.length, encabezados.length).setValues(nuevosDatos);

  // --- Sección de análisis y descripciones ---
  var filaDescripcion = hoja.getLastRow() + 2;
  var descripciones = [
    "", "Tiempo de renderizado de un cuadro por la GPU (microsegundos).",
    "Tiempo de renderizado de timewarp por la GPU (microsegundos), relacionado con latencia.",
    "Porcentaje de uso de la GPU. >90% puede indicar cuello de botella.",
    "Porcentaje de uso de la CPU.",
    "Cuadros por segundo (FPS) de la aplicación. FPS bajos indican problemas de rendimiento.",
    "Cantidad de cuadros no renderizados a tiempo.",
    "Memoria RAM disponible (MB).",
    "Cantidad de veces que ocurre screen tearing (desgarro de pantalla).",
    "Cantidad máxima de cuadros repetidos consecutivamente.",
    "Número de cuadros renderizados antes de tiempo.",
    "Número de cuadros consecutivos reutilizados por no llegar a tiempo.",
    "Tiempo de GPU normalizado (%)." // Descripción para normalized_gpu_time
  ];
  hoja.getRange(filaDescripcion, 1, 1, descripciones.length).setValues([descripciones]);

  // Calcular y colocar promedios debajo de cada columna
  var filaPromedios = filaDescripcion + 2;
  var promedios = encabezados.map((col, i) => {
    if (i === 0) return "Promedio:";
    var index = columnasDeseadas.indexOf(col);
    if (index !== -1) {
      var valores = nuevosDatos.map(row => row[index]).filter(v => !isNaN(v));
      return valores.length > 0 ? (valores.reduce((a, b) => a + b, 0) / valores.length).toFixed(2) : "N/A";
    }
    return "N/A";
  });
  hoja.getRange(filaPromedios, 1, 1, encabezados.length).setValues([promedios]);

  // --- Sección de ANÁLISIS POR COLUMNA ---
  var filaAnalisisColumnas = filaPromedios + 2;
  encabezados.forEach((columna, index) => {
    var analisisTexto = "";
    if (index === 0) {
      analisisTexto = "Análisis por Columna:"; // Etiqueta para la primera columna
    } else if (columna === "gpu_utilization_percentage") {
      var promedioGPU = promedios[index];
      if (promedioGPU !== "N/A" && parseFloat(promedioGPU) > 90) {
        analisisTexto = "GPU Utilización Promedio ALTA (>90%). Posible cuello de botella en GPU.  Revisar complejidad de shaders/VFX.";
      } else if (promedioGPU !== "N/A" && parseFloat(promedioGPU) > 70) {
        analisisTexto = "GPU Utilización Promedio Moderada (>70%).  Rendimiento generalmente OK, pero puede haber margen de optimización.";
      } else {
        analisisTexto = "GPU Utilización Promedio BAJA (<70%).  GPU holgada, buen rendimiento.";
      }
    } else if (columna === "average_frame_rate") {
      var promedioFPS = promedios[index];
      if (promedioFPS !== "N/A" && parseFloat(promedioFPS) < 60) {
        analisisTexto = "FPS Promedio BAJO (<60 FPS).  Rendimiento deficiente. Optimizar shaders/VFX para mejorar la fluidez.";
      } else if (promedioFPS !== "N/A" && parseFloat(promedioFPS) < 72) { // Asumiendo 72Hz como target para VR
        analisisTexto = "FPS Promedio MODERADO (<72 FPS).  Puede ser aceptable, pero buscar mejorar para una experiencia VR más fluida.";
      } else {
        analisisTexto = "FPS Promedio ALTO (>= 72 FPS).  Buen rendimiento, experiencia VR fluida.";
      }
    } else if (columna === "stale_frame_count") {
        var promedioStaleFrames = promedios[index];
        if (promedioStaleFrames !== "N/A" && parseFloat(promedioStaleFrames) > 10) { // Umbral de ejemplo
            analisisTexto = "Cantidad de Stale Frames Promedio ELEVADA (>10).  Indica problemas de rendimiento y posibles interrupciones en la fluidez visual.";
        } else {
            analisisTexto = "Cantidad de Stale Frames Promedio BAJA (<=10).  Buen rendimiento, pocos cuadros reutilizados.";
        }
    }
    // ... Aquí puedes añadir análisis para otras columnas relevantes ...

    if (analisisTexto) { // Solo escribe si hay texto de análisis
      hoja.getRange(filaAnalisisColumnas + index -1, 1 + index).setValue(analisisTexto); // **[CORREGIDO]** Indice de columna para analisis
    }
  });


  // --- Sección de ANÁLISIS GENERAL ---
  var filaAnalisisGeneral = filaAnalisisColumnas + encabezados.length + 1; // Deja espacio debajo del análisis por columna y promedios
  var analisisGeneralTexto = "";

  // Ejemplo de análisis general basado en promedios de GPU y FPS
  var promedioGPUGeneral = promedios[columnasDeseadas.indexOf("gpu_utilization_percentage") + 1]; // +1 porque 'Promedio:' ocupa la primera columna
  var promedioFPSGeneral = promedios[columnasDeseadas.indexOf("average_frame_rate") + 1];

  if (promedioGPUGeneral !== "N/A" && promedioFPSGeneral !== "N/A") {
    if (parseFloat(promedioGPUGeneral) > 85 && parseFloat(promedioFPSGeneral) < 60) {
      analisisGeneralTexto = "ANÁLISIS GENERAL:  RENDIMIENTO LIMITADO.  Alta utilización de GPU y bajos FPS indican un posible cuello de botella significativo en la GPU.  Optimizar shaders y VFX es CRUCIAL para mejorar el rendimiento y la fluidez en Oculus.";
    } else if (parseFloat(promedioGPUGeneral) > 70 && parseFloat(promedioFPSGeneral) < 72) {
      analisisGeneralTexto = "ANÁLISIS GENERAL: RENDIMIENTO MODERADO.  Utilización de GPU y FPS en rangos aceptables, pero existe margen de mejora.  Considerar optimizaciones para asegurar un rendimiento VR óptimo y constante.";
    } else {
      analisisGeneralTexto = "ANÁLISIS GENERAL:  BUEN RENDIMIENTO.  La GPU se utiliza de manera eficiente y los FPS son altos.  El rendimiento general es bueno para las pruebas actuales.";
    }
  } else {
    analisisGeneralTexto = "ANÁLISIS GENERAL:  No se puede realizar un análisis general completo debido a la falta de datos de GPU o FPS.";
  }

  hoja.getRange(filaAnalisisGeneral, 1, 1, encabezados.length).setValue([Array(encabezados.length).fill("").map((empty, index) => index === 0 ? analisisGeneralTexto : empty)]); // Escribir análisis general expandido


  // Crear gráficos (sin cambios en esta parte)
  var posicionFila = filaAnalisisGeneral + 3; // Ajustar posición después de las filas de análisis
  crearGraficoDoble(hoja, "Time Stamp", "gpu_utilization_percentage", "normalized_gpu_time", "GPU Utilization & Normalized Render Time", "Time (ms)", "GPU % & Normalized Render Time", 13.88, posicionFila);
  posicionFila += 20;
  crearGraficoDoble(hoja, "Time Stamp", "average_frame_rate", "stale_frame_count", "FPS & Stale Frames Over Time", "Time (ms)", "FPS & Stale Frames", 72, posicionFila);
  posicionFila += 20;
  crearGraficoDoble(hoja, "Time Stamp", "cpu_utilization_percentage", "gpu_utilization_percentage", "CPU vs GPU Utilization", "Time (ms)", "Utilization (%)", null, posicionFila);
  posicionFila += 20;
  crearGraficoDoble(hoja, "Time Stamp", "early_frame_count", "stale_frames_consecutive", "Early Frames vs Stale Frames Consecutive", "Time (ms)", "Frames Count", null, posicionFila);

  // No necesitamos la llamada a la API de IA
  // generarAnalisisIA(hoja);
}


function crearGraficoDoble(hoja, colX, colY1, colY2, titulo, ejeX, ejeY, target, filaGrafico) {
  var datos = hoja.getDataRange().getValues();
  var encabezados = datos[0];
  var indexX = encabezados.indexOf(colX) + 1;
  var indexY1 = encabezados.indexOf(colY1) + 1;
  var indexY2 = encabezados.indexOf(colY2) + 1;

  if (indexX === 0 || indexY1 === 0 || indexY2 === 0) {
    Logger.log("Columnas no encontradas");
    return;
  }

  var rangoTiempo = hoja.getRange(2, indexX, hoja.getLastRow() - 1);
  var rangoY1 = hoja.getRange(2, indexY1, hoja.getLastRow() - 1);
  var rangoY2 = hoja.getRange(2, indexY2, hoja.getLastRow() - 1);

  var chart = hoja.newChart()
    .setChartType(Charts.ChartType.LINE)
    .addRange(rangoTiempo)
    .addRange(rangoY1)
    .addRange(rangoY2)
    .setPosition(filaGrafico, 1, 0, 0)
    .setOption('title', titulo)
    .setOption('hAxis', { title: ejeX })
    .setOption('vAxis', { title: ejeY })
    .setOption('series', {
      0: { curveType: 'function', color: 'red' },
      1: { curveType: 'function', color: 'blue' }
    })
    .build();

  hoja.insertChart(chart);
}


// Funciones de análisis de IA y credenciales ya no son necesarias
// function generarAnalisisIA(hoja) { ... }
// function obtenerCredenciales(fileId) { ... }
