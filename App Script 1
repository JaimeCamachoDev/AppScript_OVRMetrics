function procesarDatosYCrearGraficos() {
  var hoja = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var datos = hoja.getDataRange().getValues();
  
  if (datos.length <= 1) {
    Logger.log("No hay datos suficientes en la hoja.");
    return;
  }
  
  // Encabezados de las columnas a mantener
  var columnasDeseadas = [
    "Time Stamp", "app_gpu_time_microseconds", "timewarp_gpu_time_microseconds",
    "gpu_utilization_percentage", "cpu_utilization_percentage", "average_frame_rate",
    "stale_frame_count", "available_memory_MB", "screen_tear_count", "max_repeated_frames",
    "early_frame_count", "stale_frames_consecutive"
  ];
  
  var encabezados = columnasDeseadas.slice(); // Copia los encabezados filtrados
  var indices = columnasDeseadas.map(col => datos[0].indexOf(col)).filter(i => i !== -1);
  
  var nuevosDatos = datos.slice(1).map(fila => indices.map(i => fila[i]));
  
  // Agregar columna extra para Normalized GPU Time sin sobreescribir datos existentes
  var indiceGpuTime = columnasDeseadas.indexOf("app_gpu_time_microseconds");
  if (indiceGpuTime !== -1) {
    var maxGpuTime = Math.max(...nuevosDatos.map(row => row[indiceGpuTime]));
    encabezados.push("normalized_gpu_time"); // Agregar nuevo encabezado
    for (var i = 0; i < nuevosDatos.length; i++) {
      nuevosDatos[i].push(Math.round((nuevosDatos[i][indiceGpuTime] / maxGpuTime) * 100));
    }
  }
  
  // Limpiar hoja y escribir los datos filtrados con la nueva columna
  hoja.clear();
  hoja.getRange(1, 1, 1, encabezados.length).setValues([encabezados]);
  hoja.getRange(2, 1, nuevosDatos.length, encabezados.length).setValues(nuevosDatos);

 // Espacio de separación y descripción de columnas con promedios
  var filaDescripcion = hoja.getLastRow() + 2;
  var descripciones = [
    "", "Indica cuánto tiempo está usando la GPU para renderizar un solo cuadro. Si este valor es alto, puede significar que los efectos visuales están sobrecargando la GPU.",
    "Es el tiempo que la GPU pasa renderizando la compensación de movimiento. Un valor alto puede indicar problemas de latencia.",
    "Indica el porcentaje de uso de la GPU. Si está cerca del 100%, significa que la GPU está al máximo rendimiento y puede haber problemas de rendimiento.",
    "Indica cuánto está siendo utilizada la CPU.",
    "Mide los cuadros por segundo en la aplicación. Caídas en FPS pueden estar relacionadas con efectos visuales complejos que afectan el rendimiento.",
    "Muestra cuántos cuadros no llegaron a tiempo y se reutilizó un cuadro anterior. Un alto número indica problemas de rendimiento.",
    "Memoria disponible. Puede ayudar a entender si los efectos visuales están consumiendo demasiada memoria.",
    "Indica cuántas veces ha ocurrido un desgarro en pantalla. Un alto valor puede deberse a un uso excesivo de la GPU.",
    "Indica la cantidad máxima de cuadros repetidos, lo que puede reflejar problemas de rendimiento.",
    "Número de cuadros tempranos.",
    "Número de cuadros consecutivos reutilizados porque no se procesaron a tiempo."
  ];
  hoja.getRange(filaDescripcion, 1, 1, encabezados.length-1).setValues([descripciones]);
  

  // Calcular y colocar promedios debajo de cada columna
  var filaPromedios = filaDescripcion + 2;
  var promedios = encabezados.map((col, i) => {
    if (i === 0) return "Promedio:"; // Dejar etiqueta en la primera celda
    var index = columnasDeseadas.indexOf(col);
    if (index !== -1) {
      var valores = nuevosDatos.map(row => row[index]).filter(v => !isNaN(v));
      return valores.length > 0 ? (valores.reduce((a, b) => a + b, 0) / valores.length).toFixed(2) : "N/A";
    }
    return "N/A";
  });
  hoja.getRange(filaPromedios, 1, 1, encabezados.length).setValues([promedios]);
  



  
  // Crear gráficos con posiciones organizadas
  var posicionFila = hoja.getLastRow() + 2;
  crearGraficoDoble(hoja, "Time Stamp", "gpu_utilization_percentage", "normalized_gpu_time", "GPU Utilization & Normalized Render Time", "Time (ms)", "GPU % & Normalized Render Time", 13.88, posicionFila);
  posicionFila += 20;
  crearGraficoDoble(hoja, "Time Stamp", "average_frame_rate", "stale_frame_count", "FPS & Stale Frames Over Time", "Time (ms)", "FPS & Stale Frames", 72, posicionFila);
  posicionFila += 20;
  crearGraficoDoble(hoja, "Time Stamp", "cpu_utilization_percentage", "gpu_utilization_percentage", "CPU vs GPU Utilization", "Time (ms)", "Utilization (%)", null, posicionFila);
  posicionFila += 20;
  crearGraficoDoble(hoja, "Time Stamp", "early_frame_count", "stale_frames_consecutive", "Early Frames vs Stale Frames Consecutive", "Time (ms)", "Frames Count", null, posicionFila);
}

function crearGraficoDoble(hoja, colX, colY1, colY2, titulo, ejeX, ejeY, target, filaGrafico) {
  var datos = hoja.getDataRange().getValues();
  var encabezados = datos[0];
  var indexX = encabezados.indexOf(colX) + 1;
  var indexY1 = encabezados.indexOf(colY1) + 1;
  var indexY2 = encabezados.indexOf(colY2) + 1;
  
  if (indexX === 0 || indexY1 === 0 || indexY2 === 0) {
    Logger.log("Columnas no encontradas");
    return;
  }
  
  var rangoTiempo = hoja.getRange(2, indexX, hoja.getLastRow() - 1);
  var rangoY1 = hoja.getRange(2, indexY1, hoja.getLastRow() - 1);
  var rangoY2 = hoja.getRange(2, indexY2, hoja.getLastRow() - 1);
  
  var chart = hoja.newChart()
    .setChartType(Charts.ChartType.LINE)
    .addRange(rangoTiempo)
    .addRange(rangoY1)
    .addRange(rangoY2)
    .setPosition(filaGrafico, 1, 0, 0)
    .setOption('title', titulo)
    .setOption('hAxis', { title: ejeX })
    .setOption('vAxis', { title: ejeY })
    .setOption('series', {
      0: { curveType: 'function', color: 'red' },
      1: { curveType: 'function', color: 'blue' }
    })
    .build();
  
  hoja.insertChart(chart);
}

function generarAnalisisDatos() {
  var hoja = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var datos = hoja.getDataRange().getValues();
  var encabezados = datos[0];
  var indiceGPU = encabezados.indexOf("gpu_utilization_percentage");
  var indiceFPS = encabezados.indexOf("average_frame_rate");
  
  if (indiceGPU === -1 || indiceFPS === -1) {
    Logger.log("No se encontraron las columnas necesarias");
    return;
  }
  
  var totalGPU = 0, totalFPS = 0;
  var count = datos.length - 1;
  
  for (var i = 1; i < datos.length; i++) {
    totalGPU += datos[i][indiceGPU];
    totalFPS += datos[i][indiceFPS];
  }
  
  var promedioGPU = totalGPU / count;
  var promedioFPS = totalFPS / count;
  
  // Encontrar la fila donde escribir los resultados debajo de las columnas correspondientes
  var filaPromedios = hoja.getLastRow() + 2;
  var columnaGPU = encabezados.indexOf("gpu_utilization_percentage") + 1;
  var columnaFPS = encabezados.indexOf("average_frame_rate") + 1;
  
  hoja.getRange(filaPromedios, columnaGPU).setValue("Promedio: " + promedioGPU.toFixed(2) + "%");
  hoja.getRange(filaPromedios, columnaFPS).setValue("Promedio: " + promedioFPS.toFixed(2));
}
