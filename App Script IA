function procesarDatosYCrearGraficos() {
  var hoja = SpreadsheetApp.getActiveSpreadsheet().getActiveSheet();
  var datos = hoja.getDataRange().getValues();

  if (datos.length <= 1) {
    Logger.log("No hay datos suficientes en la hoja.");
    return;
  } else { // <--- Bloque ELSE: Ejecutar SOLO si hay datos (datos.length > 1)

    // Encabezados de las columnas a mantener
    var columnasDeseadas = [
      "Time Stamp", "app_gpu_time_microseconds", "timewarp_gpu_time_microseconds",
      "gpu_utilization_percentage", "cpu_utilization_percentage", "average_frame_rate",
      "stale_frame_count", "available_memory_MB", "screen_tear_count", "max_repeated_frames",
      "early_frame_count", "stale_frames_consecutive", "normalized_gpu_time" // Mantenemos normalized_gpu_time
    ];

    var encabezados = columnasDeseadas.slice();
    var indices = columnasDeseadas.map(col => datos[0].indexOf(col)).filter(i => i !== -1);
    var nuevosDatos = datos.slice(1).map(fila => indices.map(i => fila[i]));

    // Calcular Normalized GPU Time (asegurándonos que el índice exista Y que maxGpuTime sea válido)
    var indiceGpuTime = columnasDeseadas.indexOf("app_gpu_time_microseconds");
    var maxGpuTime = NaN; // Inicializar con NaN por defecto
    if (indiceGpuTime !== -1) { // <-- VERIFICAR que indiceGpuTime sea válido
      maxGpuTime = Math.max(...nuevosDatos.map(row => row[indiceGpuTime]));
    }

    if (indiceGpuTime !== -1 && !isNaN(maxGpuTime) && isFinite(maxGpuTime) && maxGpuTime !== 0) { // <-- VERIFICAR que maxGpuTime sea NUMÉRICO y FINITO y NO CERO
      if (!encabezados.includes("normalized_gpu_time")) { // Evitar duplicados si ya existe
        encabezados.push("normalized_gpu_time");
      }
      for (var i = 0; i < nuevosDatos.length; i++) {
        nuevosDatos[i].push(Math.round((nuevosDatos[i][indiceGpuTime] / maxGpuTime) * 100));
      }
    } else {
      Logger.log("No se pudo calcular 'normalized_gpu_time'. Columna 'app_gpu_time_microseconds' no encontrada o datos inválidos en esa columna.");
      // Si no se pudo calcular normalized_gpu_time, asegúrate de que no esté en encabezados para evitar errores posteriores
      columnasDeseadas = columnasDeseadas.filter(col => col !== "normalized_gpu_time");
      encabezados = encabezados.filter(col => col !== "normalized_gpu_time");
    }


    // --- Sección para añadir filas extra para graficos (AÑADIR FILAS EXTRA AL INICIO) ---
    var filasParaGraficos = 20 * 4; // Espacio para 4 gráficos (aprox. 20 filas por gráfico)
    var filaAnalisisGeneralEstimada = datos.length + 2 + 2 + 2 + 2; // Estimación de la fila de análisis general (datos + descripciones + promedios + analisis col + espacio)
    var filasNecesarias = filaAnalisisGeneralEstimada + filasParaGraficos + 150; // Añadir 150 filas extras de buffer
    var filasActuales = hoja.getMaxRows();

    if (filasNecesarias > filasActuales) {
      var filasAInsertar = filasNecesarias - filasActuales;
      hoja.insertRows(filasActuales + 1, filasAInsertar); // Insertar filas al final
      Logger.log("Se insertaron " + filasAInsertar + " filas adicionales para asegurar espacio para datos, análisis y gráficos.");
    }


    // Limpiar hoja y escribir datos y encabezados
    hoja.clear();
    hoja.getRange(1, 1, 1, encabezados.length).setValues([encabezados]);
    hoja.getRange(2, 1, nuevosDatos.length, encabezados.length).setValues(nuevosDatos);

    // --- Sección de análisis y descripciones ---
    var filaDescripcion = hoja.getLastRow() + 2;
    var descripciones = [
      "", "Tiempo de renderizado de un cuadro por la GPU (microsegundos).",
      "Tiempo de renderizado de timewarp por la GPU (microsegundos), relacionado con latencia.",
      "Porcentaje de uso de la GPU. >90% puede indicar cuello de botella.",
      "Porcentaje de uso de la CPU.",
      "Cuadros por segundo (FPS) de la aplicación. FPS bajos indican problemas de rendimiento.",
      "Cantidad de cuadros no renderizados a tiempo.",
      "Memoria RAM disponible (MB).",
      "Cantidad de veces que ocurre screen tearing (desgarro de pantalla).",
      "Cantidad máxima de cuadros repetidos consecutivamente.",
      "Número de cuadros renderizados antes de tiempo.",
      "Número de cuadros consecutivos reutilizados por no llegar a tiempo.",
      "Tiempo de GPU normalizado (%)." // Descripción para normalized_gpu_time
    ];
    // Ajustar descripciones si normalized_gpu_time no se calculó
    if (!encabezados.includes("normalized_gpu_time")) {
      descripciones.pop(); // Eliminar la descripción de normalized_gpu_time
    }
    hoja.getRange(filaDescripcion, 1, 1, descripciones.length).setValues([descripciones]);

    // --- Formato de la tabla (aplicar después de escribir datos y descripciones) ---
    // Rango de datos (incluyendo encabezados, descripciones, promedios y análisis por columna)
    var filaInicioTabla = 1;

    // --- Sección de calculo de filas para el rango de la tabla ---
    var filaPromedios = filaDescripcion + 2;
    var filaAnalisisColumnas = filaPromedios + 2;
    var filaFinTabla = filaAnalisisColumnas + 1;

    // --- DEPURACIÓN EXTENDIDA: Imprimir valores justo antes de calcular rangoTabla ---
    Logger.log("--- Depuración Extendida antes de rangoTabla ---");
    Logger.log("hoja.getLastRow(): " + hoja.getLastRow()); // <--- Añadido para depuración
    Logger.log("filaDescripcion: " + filaDescripcion);
    Logger.log("filaPromedios: " + filaPromedios);
    Logger.log("filaAnalisisColumnas: " + filaAnalisisColumnas);
    Logger.log("filaFinTabla (pre-corrección): " + filaFinTabla); // Valor ANTES de Math.max

    // --- Depuración: Imprimir valores de filaInicioTabla, filaFinTabla, encabezados.length ---
    Logger.log("filaInicioTabla: " + filaInicioTabla);
    Logger.log("filaFinTabla: " + filaFinTabla);
    Logger.log("encabezados.length: " + encabezados.length);

    // --- Corrección: Asegurar que el número de filas sea al menos 1 ---
    var numFilasTabla = Math.max(1, filaFinTabla - filaInicioTabla + 1);
    var rangoTabla = hoja.getRange(filaInicioTabla, 1, numFilasTabla, encabezados.length);


    rangoTabla.setWrapStrategy(SpreadsheetApp.WrapStrategy.WRAP) // Ajustar texto
               .setVerticalAlignment("middle")         // Alineación vertical centrada
               .setHorizontalAlignment("center");       // Alineación horizontal centrada


    // Calcular y colocar promedios debajo de cada columna
    var promedios = encabezados.map((col, i) => {
      if (i === 0) return "Promedio:";
      var index = columnasDeseadas.indexOf(col);
      if (index !== -1) {
        var valores = nuevosDatos.map(row => row[index]).filter(v => !isNaN(v));
        return valores.length > 0 ? (valores.reduce((a, b) => a + b, 0) / valores.length).toFixed(2) : "N/A";
      }
      return "N/A";
    });
    hoja.getRange(filaPromedios, 1, 1, encabezados.length).setValues([promedios]);

    // --- Sección de ANÁLISIS POR COLUMNA (EN UNA FILA) ---
    var analisisColumnasTexto = encabezados.map((columna, index) => { // Usamos map para crear un array con los análisis
      var analisisTexto = "";
      if (index === 0) {
        analisisTexto = "Análisis por Columna:"; // Etiqueta para la primera columna
      } else if (columna === "gpu_utilization_percentage") {
        var promedioGPU = promedios[index];
        if (promedioGPU !== "N/A" && parseFloat(promedioGPU) > 90) {
          analisisTexto = "GPU ALTA (>90%). Cuello de botella GPU.";
        } else if (promedioGPU !== "N/A" && parseFloat(promedioGPU) > 70) {
          analisisTexto = "GPU Moderada (>70%). Optimización posible.";
        } else {
          analisisTexto = "GPU BAJA (<70%). GPU holgada.";
        }
      } else if (columna === "average_frame_rate") {
        var promedioFPS = promedios[index];
        if (promedioFPS !== "N/A" && parseFloat(promedioFPS) < 60) {
          analisisTexto = "FPS BAJOS (<60). Rendimiento deficiente.";
        } else if (promedioFPS !== "N/A" && parseFloat(promedioFPS) < 72) { // Asumiendo 72Hz como target para VR
          analisisTexto = "FPS MODERADOS (<72). Mejorar fluidez VR.";
        } else {
          analisisTexto = "FPS ALTOS (>= 72). Buen rendimiento VR.";
        }
      } else if (columna === "stale_frame_count") {
          var promedioStaleFrames = promedios[index];
          if (promedioStaleFrames !== "N/A" && parseFloat(promedioStaleFrames) > 10) { // Umbral de ejemplo
              analisisTexto = "Stale Frames ELEVADOS (>10). Problemas de fluidez.";
          } else {
              analisisTexto = "Stale Frames BAJOS (<=10). Buen rendimiento.";
          }
      } else if (columna === "cpu_utilization_percentage") {
        var promedioCPU = promedios[index];
        if (promedioCPU !== "N/A" && parseFloat(promedioCPU) > 85) {
          analisisTexto = "CPU ALTA (>85%). Posible cuello de botella CPU.";
        } else if (promedioCPU !== "N/A" && parseFloat(promedioCPU) > 60) {
          analisisTexto = "CPU Moderada (>60%). Rendimiento OK.";
        } else {
          analisisTexto = "CPU BAJA (<60%). CPU holgada.";
        }
      } else if (columna === "available_memory_MB") {
        var promedioMemoria = promedios[index];
        if (promedioMemoria !== "N/A" && parseFloat(promedioMemoria) < 500) { // Umbral de ejemplo: 500MB
          analisisTexto = "MEMORIA BAJA (<500MB).  Riesgo de problemas por falta de memoria.";
        } else if (promedioMemoria !== "N/A" && parseFloat(promedioMemoria) < 1000) { // Umbral ejemplo: 1GB
          analisisTexto = "MEMORIA MODERADA (<1GB).  Memoria suficiente, pero vigilar uso.";
        } else {
          analisisTexto = "MEMORIA OK (>= 1GB).  Buena disponibilidad de memoria.";
        }
      } else if (columna === "timewarp_gpu_time_microseconds") {
        var promedioTimewarp = promedios[index];
        if (promedioTimewarp !== "N/A" && parseFloat(promedioTimewarp) > 3000) { // Umbral ejemplo: 3ms
          analisisTexto = "Timewarp GPU ALTO (>3ms).  Latencia timewarp elevada.";
        } else if (promedioTimewarp !== "N/A" && parseFloat(promedioTimewarp) > 1500) { // Umbral ejemplo: 1.5ms
          analisisTexto = "Timewarp GPU Moderado (>1.5ms).  Latencia timewarp aceptable.";
        } else {
          analisisTexto = "Timewarp GPU BAJO (<=1.5ms).  Buena latencia timewarp.";
        }
      }
      // ... Añade aquí análisis para otras columnas relevantes ...
      return analisisTexto; // Retorna el texto de análisis para cada columna
    });
    hoja.getRange(filaAnalisisColumnas, 1, 1, encabezados.length).setValues([analisisColumnasTexto]); // Escribe TODO el análisis de columnas en UNA FILA


    // --- Sección de ANÁLISIS GENERAL ---
    var filaAnalisisGeneral = filaAnalisisColumnas + 2; // Deja espacio debajo del análisis por columna
    var analisisGeneralTexto = "";

    // Ejemplo de análisis general basado en promedios de GPU y FPS
    var promedioGPUGeneral = promedios[columnasDeseadas.indexOf("gpu_utilization_percentage") + 1]; // +1 porque 'Promedio:' ocupa la primera columna
    var promedioFPSGeneral = promedios[columnasDeseadas.indexOf("average_frame_rate") + 1];

    if (encabezados.includes("gpu_utilization_percentage") && encabezados.includes("average_frame_rate")) { // <-- VERIFICAR que columnas necesarias EXISTAN
      if (promedioGPUGeneral !== "N/A" && promedioFPSGeneral !== "N/A") {
        if (parseFloat(promedioGPUGeneral) > 85 && parseFloat(promedioFPSGeneral) < 60) {
          analisisGeneralTexto = "RENDIMIENTO LIMITADO: GPU Alta y FPS bajos. Cuello de botella significativo en GPU. Optimizar shaders/VFX CRUCIAL.";
        } else if (parseFloat(promedioGPUGeneral) > 70 && parseFloat(promedioFPSGeneral) < 72) {
          analisisGeneralTexto = "RENDIMIENTO MODERADO: GPU y FPS aceptables, pero margen de mejora. Optimizar para VR óptimo.";
        } else {
          analisisGeneralTexto = "BUEN RENDIMIENTO: GPU eficiente y FPS altos. Rendimiento general bueno para pruebas.";
        }
      } else {
        analisisGeneralTexto = "No se puede realizar análisis general completo por falta de datos GPU/FPS.";
      }
    } else {
      analisisGeneralTexto = "No se puede realizar análisis general completo: Faltan columnas GPU o FPS."; // <-- Mensaje si faltan columnas
    }


    // Escribir ANÁLISIS GENERAL en UNA celda, y aplicar formato
    var rangoAnalisisGeneral = hoja.getRange(filaAnalisisGeneral, 1);
    rangoAnalisisGeneral.setValue("ANÁLISIS GENERAL: " + analisisGeneralTexto);
    rangoAnalisisGeneral.setFontWeight("bold")
                         .setWrapStrategy(SpreadsheetApp.WrapStrategy.WRAP)
                         .setVerticalAlignment("middle")
                         .setHorizontalAlignment("center");
    hoja.setRowHeight(filaAnalisisGeneral, 50); // Ajusta la altura de la fila para el texto envuelto


     // --- Sección de FORMATO CONDICIONAL de fila de PROMEDIOS ---
    var filaPromedioFormatoCondicional = filaPromedios; // Aplicar formato condicional a la fila de promedios

    // Definir rangos de "datos malos", "intermedios" y "buenos" para PROMEDIOS (EJEMPLOS - AJUSTA ESTO SEGÚN TUS NECESIDADES)
    var reglasFormatoPromedios = [];

    // Reglas para 'gpu_utilization_percentage' (columna 4, índice 3 en base 0)
    var indiceGPUUtilPromedio = 3; // Índice de la columna 'gpu_utilization_percentage' en la fila de promedios
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceGPUUtilPromedio + 1, 1, 1)]) // Aplicar solo a la celda del promedio de GPU Util
        .whenNumberGreaterThanOrEqualTo(90)
        .setBackground("#f4c7c3") // Rojo claro para > 90% (MALO - Ejemplo)
        .build());
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceGPUUtilPromedio + 1, 1, 1)])
        .whenNumberGreaterThanOrEqualTo(70)
        .setBackground("#fce8b2") // Naranja claro para > 70% (INTERMEDIO - Ejemplo)
        .build());
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceGPUUtilPromedio + 1, 1, 1)])
        .whenNumberLessThan(70)
        .setBackground("#c6efce") // Verde claro para < 70% (BUENO - Ejemplo)
        .build());


    // Reglas para 'average_frame_rate' (columna 6, índice 5 en base 0)
    var indiceFPSPromedio = 5; // Índice de la columna 'average_frame_rate' en la fila de promedios
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceFPSPromedio + 1, 1, 1)]) // Aplicar solo a la celda del promedio de FPS
        .whenNumberLessThan(60)
        .setBackground("#f4c7c3") // Rojo claro para < 60 FPS (MALO - Ejemplo)
        .build());
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceFPSPromedio + 1, 1, 1)])
        .whenNumberLessThan(72)
        .setBackground("#fce8b2") // Naranja claro para < 72 FPS (INTERMEDIO - Ejemplo)
        .build());
     reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceFPSPromedio + 1, 1, 1)])
        .whenNumberGreaterThanOrEqualTo(72)
        .setBackground("#c6efce") // Verde claro para >= 72 FPS (BUENO - Ejemplo)
        .build());

    // Reglas para 'stale_frame_count' (columna 7, índice 6 en base 0)
    var indiceStaleFramesPromedio = 6; // Índice de la columna 'stale_frame_count' en la fila de promedios
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceStaleFramesPromedio + 1, 1, 1)]) // Aplicar solo a la celda del promedio de Stale Frames
        .whenNumberGreaterThanOrEqualTo(15) // Umbral más alto para "malo"
        .setBackground("#f4c7c3") // Rojo claro para >= 15 Stale Frames (MALO - Ejemplo)
        .build());
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceStaleFramesPromedio + 1, 1, 1)])
        .whenNumberGreaterThanOrEqualTo(5) // Umbral intermedio
        .setBackground("#fce8b2") // Naranja claro para >= 5 Stale Frames (INTERMEDIO - Ejemplo)
        .build());
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceStaleFramesPromedio + 1, 1, 1)])
        .whenNumberLessThan(5)
        .setBackground("#c6efce") // Verde claro para < 5 Stale Frames (BUENO - Ejemplo)
        .build());

    // Reglas para 'cpu_utilization_percentage' (columna 5, índice 4 en base 0)
    var indiceCPUUtilPromedio = 4;
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceCPUUtilPromedio + 1, 1, 1)])
        .whenNumberGreaterThanOrEqualTo(85)
        .setBackground("#f4c7c3") // Rojo claro para > 85% (MALO - Ejemplo)
        .build());
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceCPUUtilPromedio + 1, 1, 1)])
        .whenNumberGreaterThanOrEqualTo(60)
        .setBackground("#fce8b2") // Naranja claro para > 60% (INTERMEDIO - Ejemplo)
        .build());
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceCPUUtilPromedio + 1, 1, 1)])
        .whenNumberLessThan(60)
        .setBackground("#c6efce") // Verde claro para < 60% (BUENO - Ejemplo)
        .build());

    // Reglas para 'available_memory_MB' (columna 8, índice 7 en base 0)
    var indiceMemoriaPromedio = 7;
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceMemoriaPromedio + 1, 1, 1)])
        .whenNumberLessThan(500)
        .setBackground("#f4c7c3") // Rojo claro para < 500MB (MALO - Ejemplo)
        .build());
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceMemoriaPromedio + 1, 1, 1)])
        .whenNumberLessThan(1000)
        .setBackground("#fce8b2") // Naranja claro para < 1GB (INTERMEDIO - Ejemplo)
        .build());
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceMemoriaPromedio + 1, 1, 1)])
        .whenNumberGreaterThanOrEqualTo(1000)
        .setBackground("#c6efce") // Verde claro para >= 1GB (BUENO - Ejemplo)
        .build());

    // Reglas para 'timewarp_gpu_time_microseconds' (columna 3, índice 2 en base 0)
    var indiceTimewarpPromedio = 2;
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceTimewarpPromedio + 1, 1, 1)])
        .whenNumberGreaterThanOrEqualTo(3000)
        .setBackground("#f4c7c3") // Rojo claro para > 3ms (MALO - Ejemplo)
        .build());
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceTimewarpPromedio + 1, 1, 1)])
        .whenNumberGreaterThanOrEqualTo(1500)
        .setBackground("#fce8b2") // Naranja claro para > 1.5ms (INTERMEDIO - Ejemplo)
        .build());
    reglasFormatoPromedios.push(SpreadsheetApp.newConditionalFormatRule()
        .setRanges([hoja.getRange(filaPromedioFormatoCondicional, indiceTimewarpPromedio + 1, 1, 1)])
        .whenNumberLessThan(1500)
        .setBackground("#c6efce") // Verde claro para <= 1.5ms (BUENO - Ejemplo)
        .build());


    var reglasExistentes = hoja.getConditionalFormatRules(); // Obtener reglas existentes
    hoja.setConditionalFormatRules(reglasExistentes.concat(reglasFormatoPromedios)); // Añadir NUEVAS reglas de formato condicional a la FILA DE PROMEDIOS


    // Crear gráficos (sin cambios en la lógica básica, ajustamos la posición inicial)
    var posicionFila = filaAnalisisGeneral + 3; // Ajustar posición para dejar espacio para análisis general
    // Ajustar la creación de gráficos para que dependa de si 'normalized_gpu_time' fue calculado
    let columnasGrafico1_Y = ["gpu_utilization_percentage"];
    if (encabezados.includes("normalized_gpu_time")) {
      columnasGrafico1_Y.push("normalized_gpu_time");
    }
    crearGraficoDobleOAdaptativo(hoja, "Time Stamp", columnasGrafico1_Y, "GPU Utilization & Normalized Render Time", "Time (ms)", "GPU % & Normalized Render Time", 13.88, posicionFila, columnasGrafico1_Y.length > 1);

    posicionFila += 20;
    crearGraficoDoble(hoja, "Time Stamp", "average_frame_rate", "stale_frame_count", "FPS & Stale Frames Over Time", "Time (ms)", "FPS & Stale Frames", 72, posicionFila);
    posicionFila += 20;
    crearGraficoDoble(hoja, "Time Stamp", "cpu_utilization_percentage", "gpu_utilization_percentage", "CPU vs GPU Utilization", "Time (ms)", "Utilization (%)", null, posicionFila);
    posicionFila += 20;
    crearGraficoDoble(hoja, "Time Stamp", "early_frame_count", "stale_frames_consecutive", "Early Frames vs Stale Frames Consecutive", "Time (ms)", "Frames Count", null, posicionFila);

    // No necesitamos la llamada a la API de IA
    // generarAnalisisIA(hoja);
  } // <--- FIN del bloque ELSE (datos.length > 1)
}


function crearGraficoDoble(hoja, colX, colY1, colY2, titulo, ejeX, ejeY, target, filaGrafico) {
  crearGraficoDobleOAdaptativo(hoja, colX, [colY1, colY2], titulo, ejeX, ejeY, target, filaGrafico, true);
}


function crearGraficoDobleOAdaptativo(hoja, colX, colYs, titulo, ejeX, ejeY, target, filaGrafico, esDoble) {
  var datos = hoja.getDataRange().getValues();
  var encabezados = datos[0];
  var indexX = encabezados.indexOf(colX) + 1;
  var indicesY = colYs.map(colY => encabezados.indexOf(colY) + 1);

  if (indexX === 0 || indicesY.includes(0)) {
    Logger.log("Columnas no encontradas para gráfico: " + titulo);
    return;
  }

  var rangoTiempo = hoja.getRange(2, indexX, hoja.getLastRow() - 1);
  var rangosY = indicesY.map(indexY => hoja.getRange(2, indexY, hoja.getLastRow() - 1));

  var chartBuilder = hoja.newChart()
    .setChartType(Charts.ChartType.LINE)
    .addRange(rangoTiempo);
  rangosY.forEach(rangoY => chartBuilder.addRange(rangoY));


  chartBuilder.setPosition(filaGrafico, 1, 0, 0)
    .setOption('title', titulo)
    .setOption('hAxis', { title: ejeX })
    .setOption('vAxis', { title: ejeY })
    .setOption('series', {
      0: { curveType: 'function', color: 'red' },
      1: { curveType: 'function', color: 'blue' }
    }); // Mantenemos series por defecto para gráficos dobles, adaptable si es necesario

  if (!esDoble) { // Ajustes para gráficos simples (si es necesario en el futuro)
      chartBuilder.setOption('series', { 0: { curveType: 'function', color: 'blue' } }); // Ejemplo para gráfico simple
  }


  var chart = chartBuilder.build();
  hoja.insertChart(chart);
}


// Funciones de análisis de IA y credenciales ya no son necesarias
// function generarAnalisisIA(hoja) { ... }
// function obtenerCredenciales(fileId) { ... }
